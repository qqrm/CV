name: hh-publish

on:
  workflow_dispatch:
    inputs:
      publish:
        description: Upload payloads to HeadHunter after generating them
        type: boolean
        default: false

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate HH payloads
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p hh_payloads
          payloads=(
            "resume_ru:CV_RU.MD"
            "resume_pm_ru:CV_PM_RU.MD"
            "resume_en:CV.MD"
          )
          for entry in "${payloads[@]}"; do
            IFS=":" read -r name source <<<"$entry"
            output="hh_payloads/${name}.json"
            echo "Rendering ${source} -> ${output}"
            cargo run --manifest-path scripts/convert_cv/Cargo.toml -- "$source" > "$output"
          done

      - name: Upload payload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hh-payloads
          path: hh_payloads

      - name: Summarize generated payloads
        shell: bash
        run: |
          if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
            echo "### Generated HeadHunter payloads" >> "$GITHUB_STEP_SUMMARY"
            ls -1 hh_payloads >> "$GITHUB_STEP_SUMMARY"
          fi

  publish:
    needs: generate
    if: ${{ inputs.publish }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - name: Download payload artifact
        uses: actions/download-artifact@v4
        with:
          name: hh-payloads
          path: hh_payloads

      - name: Refresh access token
        id: token
        shell: bash
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          token=$(python3 - <<'PY'
import json
import os
import sys
from urllib import error, parse, request


def fail(message, detail=None):
    text = message if detail in (None, "") else f"{message}: {detail}"
    print(text, file=sys.stderr)
    sys.exit(1)


try:
    client_id = os.environ["CLIENT_ID"]
    client_secret = os.environ["CLIENT_SECRET"]
    refresh_token = os.environ["REFRESH_TOKEN"]
except KeyError as missing:
    fail("Missing environment variable", missing.args[0])

payload = parse.urlencode(
    {
        "grant_type": "refresh_token",
        "client_id": client_id,
        "client_secret": client_secret,
        "refresh_token": refresh_token,
    }
).encode("utf-8")

request_obj = request.Request(
    "https://hh.ru/oauth/token",
    data=payload,
    method="POST",
    headers={"Content-Type": "application/x-www-form-urlencoded"},
)

try:
    with request.urlopen(request_obj, timeout=30) as response:
        body = response.read()
except error.HTTPError as exc:
    raw = exc.read().decode("utf-8", "replace")
    detail = raw
    try:
        payload_obj = json.loads(raw)
    except json.JSONDecodeError:
        pass
    else:
        detail = payload_obj.get("error_description") or payload_obj.get("error") or raw
    fail(f"HeadHunter OAuth HTTP error {exc.code}", detail)
except error.URLError as exc:
    fail("HeadHunter OAuth network error", str(exc.reason))
except Exception as exc:  # noqa: BLE001
    fail("HeadHunter OAuth request failed", str(exc))

try:
    data = json.loads(body)
except json.JSONDecodeError as exc:
    fail("Unable to parse OAuth response", str(exc))

token = data.get("access_token")
if isinstance(token, str):
    token = token.strip()
if not token:
    detail = data.get("error_description") or data.get("error") or ""
    if detail:
        fail("HeadHunter OAuth error", detail)
    fail("Unable to extract access token")

print(token)
PY
          )
          if [[ -z "$token" ]]; then
            echo "Unable to extract access token" >&2
            exit 1
          fi
          echo "::add-mask::$token"
          echo "access_token=$token" >> "$GITHUB_OUTPUT"

      - name: Upload resumes to HeadHunter
        shell: bash
        env:
          ACCESS_TOKEN: ${{ steps.token.outputs.access_token }}
          RESUME_ID_RU: ${{ secrets.RESUME_ID_RU }}
          RESUME_ID_PM_RU: ${{ secrets.RESUME_ID_PM_RU }}
          RESUME_ID_EN: ${{ secrets.RESUME_ID_EN }}
        run: |
          set -uo pipefail
          summary_file="${GITHUB_STEP_SUMMARY:-}"
          if [[ -n "$summary_file" ]]; then
            echo "### Upload results" >> "$summary_file"
          fi
          entries=(
            "$RESUME_ID_RU:resume_ru.json:Russian resume"
            "$RESUME_ID_PM_RU:resume_pm_ru.json:Russian PM resume"
            "$RESUME_ID_EN:resume_en.json:English resume"
          )
          status=0
          for entry in "${entries[@]}"; do
            IFS=":" read -r resume_id file label <<<"$entry"
            if [[ -z "$resume_id" ]]; then
              echo "Skipping ${label}: resume id is not configured" >&2
              if [[ -n "$summary_file" ]]; then
                echo "- ⚠️ ${label} (missing RESUME_ID)" >> "$summary_file"
              fi
              continue
            fi
            payload="hh_payloads/${file}"
            if [[ ! -f "$payload" ]]; then
              echo "Payload ${payload} is missing" >&2
              status=1
              if [[ -n "$summary_file" ]]; then
                echo "- ❌ ${label} (payload missing)" >> "$summary_file"
              fi
              continue
            fi
            echo "Uploading ${label} (${resume_id})"
            if curl -sS -X PUT "https://api.hh.ru/resumes/${resume_id}" \
                -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                -H "Content-Type: application/json" \
                --data "@${payload}" \
                --fail > /dev/null; then
              if [[ -n "$summary_file" ]]; then
                echo "- ✅ ${label}" >> "$summary_file"
              fi
            else
              echo "Failed to upload ${label}" >&2
              status=1
              if [[ -n "$summary_file" ]]; then
                echo "- ❌ ${label}" >> "$summary_file"
              fi
            fi
          done
          exit $status

