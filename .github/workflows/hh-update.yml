name: hh-update

on:
  schedule:
    - cron: '10 */4 * * *'
  workflow_dispatch:

jobs:
  promote:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Refresh access token
        id: token
        shell: bash
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          token=$(python3 - <<'PY'
import json
import os
import sys
from urllib import error, parse, request


def fail(message, detail=None):
    text = message if detail in (None, "") else f"{message}: {detail}"
    print(text, file=sys.stderr)
    sys.exit(1)


try:
    client_id = os.environ["CLIENT_ID"]
    client_secret = os.environ["CLIENT_SECRET"]
    refresh_token = os.environ["REFRESH_TOKEN"]
except KeyError as missing:
    fail("Missing environment variable", missing.args[0])

payload = parse.urlencode(
    {
        "grant_type": "refresh_token",
        "client_id": client_id,
        "client_secret": client_secret,
        "refresh_token": refresh_token,
    }
).encode("utf-8")

request_obj = request.Request(
    "https://hh.ru/oauth/token",
    data=payload,
    method="POST",
    headers={"Content-Type": "application/x-www-form-urlencoded"},
)

try:
    with request.urlopen(request_obj, timeout=30) as response:
        body = response.read()
except error.HTTPError as exc:
    raw = exc.read().decode("utf-8", "replace")
    detail = raw
    try:
        payload_obj = json.loads(raw)
    except json.JSONDecodeError:
        pass
    else:
        detail = payload_obj.get("error_description") or payload_obj.get("error") or raw
    fail(f"HeadHunter OAuth HTTP error {exc.code}", detail)
except error.URLError as exc:
    fail("HeadHunter OAuth network error", str(exc.reason))
except Exception as exc:  # noqa: BLE001
    fail("HeadHunter OAuth request failed", str(exc))

try:
    data = json.loads(body)
except json.JSONDecodeError as exc:
    fail("Unable to parse OAuth response", str(exc))

token = data.get("access_token")
if isinstance(token, str):
    token = token.strip()
if not token:
    detail = data.get("error_description") or data.get("error") or ""
    if detail:
        fail("HeadHunter OAuth error", detail)
    fail("Unable to extract access token")

print(token)
PY
          )
          if [[ -z "$token" ]]; then
            echo "Unable to extract access token" >&2
            exit 1
          fi
          echo "::add-mask::$token"
          echo "access_token=$token" >> "$GITHUB_OUTPUT"

      - name: Promote resumes in HeadHunter search
        shell: bash
        env:
          ACCESS_TOKEN: ${{ steps.token.outputs.access_token }}
          RESUME_ID_RU: ${{ secrets.RESUME_ID_RU }}
          RESUME_ID_PM_RU: ${{ secrets.RESUME_ID_PM_RU }}
          RESUME_ID_EN: ${{ secrets.RESUME_ID_EN }}
        run: |
          set -uo pipefail
          summary_file="${GITHUB_STEP_SUMMARY:-}"
          if [[ -n "$summary_file" ]]; then
            echo "### Resume promotion results" >> "$summary_file"
          fi
          entries=(
            "$RESUME_ID_RU:Russian resume"
            "$RESUME_ID_PM_RU:Russian PM resume"
            "$RESUME_ID_EN:English resume"
          )
          status=0
          for entry in "${entries[@]}"; do
            IFS=":" read -r resume_id label <<<"$entry"
            if [[ -z "$resume_id" ]]; then
              echo "Skipping ${label}: resume id is not configured" >&2
              if [[ -n "$summary_file" ]]; then
                echo "- ⚠️ ${label} (missing RESUME_ID)" >> "$summary_file"
              fi
              continue
            fi
            echo "Promoting ${label} (${resume_id})"
            if curl -sS -X POST "https://api.hh.ru/resumes/${resume_id}/publish" \
                -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                -H "Content-Length: 0" \
                --fail > /dev/null; then
              if [[ -n "$summary_file" ]]; then
                echo "- ✅ ${label}" >> "$summary_file"
              fi
            else
              echo "Failed to promote ${label}" >&2
              status=1
              if [[ -n "$summary_file" ]]; then
                echo "- ❌ ${label}" >> "$summary_file"
              fi
            fi
          done
          exit $status
