name: hh-update

on:
  schedule:
    - cron: '10 */4 * * *'
  workflow_dispatch:

jobs:
  promote:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Refresh access token
        id: token
        shell: bash
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          response=$(curl -sS -X POST https://hh.ru/oauth/token \
            --data-urlencode grant_type=refresh_token \
            --data-urlencode client_id="${CLIENT_ID}" \
            --data-urlencode client_secret="${CLIENT_SECRET}" \
            --data-urlencode refresh_token="${REFRESH_TOKEN}")
          token=$(echo "$response" | jq -r '.access_token')
          if [[ -z "$token" || "$token" == "null" ]]; then
            message=$(echo "$response" | jq -r '.error_description // .error // empty')
            if [[ -n "$message" ]]; then
              echo "HeadHunter OAuth error: ${message}" >&2
            else
              echo "Unable to extract access token" >&2
            fi
            exit 1
          fi
          echo "::add-mask::$token"
          echo "access_token=$token" >> "$GITHUB_OUTPUT"

      - name: Promote resumes in HeadHunter search
        shell: bash
        env:
          ACCESS_TOKEN: ${{ steps.token.outputs.access_token }}
          RESUME_ID_RU: ${{ secrets.RESUME_ID_RU }}
          RESUME_ID_PM_RU: ${{ secrets.RESUME_ID_PM_RU }}
          RESUME_ID_EN: ${{ secrets.RESUME_ID_EN }}
        run: |
          set -uo pipefail
          summary_file="${GITHUB_STEP_SUMMARY:-}"
          if [[ -n "$summary_file" ]]; then
            echo "### Resume promotion results" >> "$summary_file"
          fi
          entries=(
            "${RESUME_ID_RU:-}:Russian resume"
            "${RESUME_ID_PM_RU:-}:Russian PM resume"
            "${RESUME_ID_EN:-}:English resume"
          )
          status=0
          for entry in "${entries[@]}"; do
            IFS=":" read -r resume_id label <<<"$entry"
            if [[ -z "$resume_id" ]]; then
              echo "Skipping ${label}: resume id is not configured" >&2
              if [[ -n "$summary_file" ]]; then
                echo "- ⚠️ ${label} (missing RESUME_ID)" >> "$summary_file"
              fi
              continue
            fi
            echo "Promoting ${label} (${resume_id})"
            if curl -sS -X POST "https://api.hh.ru/resumes/${resume_id}/publish" \
                -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                -H "Content-Length: 0" \
                --fail > /dev/null; then
              if [[ -n "$summary_file" ]]; then
                echo "- ✅ ${label}" >> "$summary_file"
              fi
            else
              echo "Failed to promote ${label}" >&2
              status=1
              if [[ -n "$summary_file" ]]; then
                echo "- ❌ ${label}" >> "$summary_file"
              fi
            fi
          done
          exit $status
